import{_ as i,c as a,a2 as t,o as n}from"./chunks/framework.BjqFKMAQ.js";const k=JSON.parse('{"title":"你好，Jenkins","description":"","frontmatter":{},"headers":[],"relativePath":"devops/hello-jenkins.md","filePath":"devops/hello-jenkins.md","lastUpdated":1727711249000}'),o={name:"devops/hello-jenkins.md"};function s(r,e,l,c,d,h){return n(),a("div",null,e[0]||(e[0]=[t('<h1 id="你好-jenkins" tabindex="-1">你好，Jenkins <a class="header-anchor" href="#你好-jenkins" aria-label="Permalink to &quot;你好，Jenkins&quot;">​</a></h1><blockquote><p>Jenkins是流行的开源的CI/CD服务器，以插件的方式实现扩展。Jenkins持续集成、持续部署能力，将开发者从繁琐的部署过程中解放出来。本文介绍了基于Docker运行Jenkins容器实现CI/CD最佳实践。</p><p>本文不对软件开发、发布流程与规范作详细探索，主要目标在于使用Jenkins实现开发者提交代码到GitHub，发布流程自动完成。</p></blockquote><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>此文档由介绍Jenkins简介开始，通过部署一个VitePress项目最佳实践，让读者感受并体验Jenkins的强大功能，并可以将Jenkins的CI/CD有效迁移到自己的项目中。 阅读此文档，你将收获：</p><ol><li>对Jenkins和CI/CD有一个更具体的认识</li><li>学习基于docker构建的Jenkins最佳实践</li><li>部署基于VitePress的个人网站</li></ol><p>本文适用于具备一定计算机基础和编程能力的软件开发工程师（前端&amp;后端）、运维工程师、软件架构师以及项目管理，阅读本文章之前，需具备以下前置能力：</p><ul><li>Linux基础</li><li>Docker容器</li><li>Git：分布式开源版本管理工具</li><li>GitHub（Gitee或Gitlab）：代码托管平台</li><li>Web开发基础：了解nodejs和npm</li></ul><h2 id="jenkins简介" tabindex="-1">Jenkins简介 <a class="header-anchor" href="#jenkins简介" aria-label="Permalink to &quot;Jenkins简介&quot;">​</a></h2><p>介绍Jenkins之前，首先对持续集成和持续部署进行简单介绍。</p><p><a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noreferrer">持续集成，CI（Continuous Integration）</a>：一种软件开发实践，旨在频繁地将开发人员的代码变更集成到共享的代码库中，并通过自动化的构建、测试和验证过程，确保软件的质量和稳定性。</p><p><a href="https://codilime.com/blog/what-is-ci-cd/" target="_blank" rel="noreferrer">持续部署或持续部署，CD（Continuous Delivery | Continuous Deployment）</a>：CD由持续交付和持续部署两个阶段组成，持续交付将通过集成阶段的代码进行封装和制品，输出待发布版本和文档到仓库；持续部署从版本仓库中取出发布版本部署到开发、测试、预发布或生产环境。</p><p>从软件代码开发到部署，需要经历单元测试、集成测试、代码合并、质量审查、构建、部署等过程，该过程繁琐且需要频繁执行。CI/CD旨在将该过程流程化、自动化，有效缩短软件迭代周期，Jenkins是一款实现CI/CD的开源软件。</p><p>Jenkins由Java开发，支持多种构建风格，包括自由风格、流水线、多分支流水线，依靠强大且功能齐全的插件，整个各领域工具，使用可视化Web界面快速搭建CI/CD流水线，实现一次配置、重复执行。本文中的对软件发布的详细规范未做探讨，简单搭建一个「草台班子」</p><h2 id="快速启动jenkins实例" tabindex="-1">快速启动Jenkins实例 <a class="header-anchor" href="#快速启动jenkins实例" aria-label="Permalink to &quot;快速启动Jenkins实例&quot;">​</a></h2><p>docker的可移植性和资源隔离给开发工作带来了极大的便利。在个人电脑上进行开发实践，可以接近0成本移植到生产环境，无需繁琐的依赖安装。资源隔离保证我们宿主机环境的「干净整洁」，随用随删。</p><h3 id="前置要求" tabindex="-1">前置要求 <a class="header-anchor" href="#前置要求" aria-label="Permalink to &quot;前置要求&quot;">​</a></h3><p>为了进一步提高项目可移植性，本项目使用<code>docker-compose</code>构建容器配置。环境依赖：</p><ul><li>操作系统：amd64 &amp; Ubuntu22.04</li><li>Docker：25.04</li><li>Jenkins容器：jenkins/jenkins:lts-jdk17（长期支持版本）</li></ul><h3 id="快速启动" tabindex="-1">快速启动 <a class="header-anchor" href="#快速启动" aria-label="Permalink to &quot;快速启动&quot;">​</a></h3><blockquote><p>实践项目已发布在<a href="https://github.com/xiaolinstar/docker-jenkins" target="_blank" rel="noreferrer">GitHub</a>和<a href="https://gitee.com/xingxiaolin/docker-jerkins" target="_blank" rel="noreferrer">Gitee</a>仓库中。</p></blockquote><ul class="contains-task-list"><li class="task-list-item"><span class="task-list-item-checkbox-span" style="position:relative;cursor:pointer;width:14px;height:14px;display:inline-block;box-sizing:border-box;background:#ffffff;vertical-align:middle;border-width:1px;border-style:solid;border-color:#ccc;"><span class="task-list-item-checkbox-before" style="box-sizing:content-box;border:1px solid #fff;border-left:0;border-top:0;height:7px;left:4px;position:absolute;top:1px;transform:rotate(45deg) scaleY(0);width:3px;transition:transform .15s ease-in .05s;transform-origin:center;"></span><input class="task-list-item-checkbox" disabled="" type="checkbox" style="display:none;"></span> 待完成</li></ul><h2 id="vitepress初体验" tabindex="-1">VitePress初体验 <a class="header-anchor" href="#vitepress初体验" aria-label="Permalink to &quot;VitePress初体验&quot;">​</a></h2><p>VitePress简介。</p><p>本地快速体验VitePress项目。</p><h3 id="前置要求-1" tabindex="-1">前置要求 <a class="header-anchor" href="#前置要求-1" aria-label="Permalink to &quot;前置要求&quot;">​</a></h3><p>在本地开发环境安装<code>nodejs</code>和<code>npm</code>，参考VitePress官网创建项目。</p><ul><li>操作系统：amd64 &amp; Ubuntu22.04</li><li>Docker：25.04</li><li>node：22.6.0（推荐lts版本20 22）</li></ul><h3 id="创建本地项目" tabindex="-1">创建本地项目 <a class="header-anchor" href="#创建本地项目" aria-label="Permalink to &quot;创建本地项目&quot;">​</a></h3><p>使用npm或pnpm创建VitePress项目</p><h3 id="容器化" tabindex="-1">容器化 <a class="header-anchor" href="#容器化" aria-label="Permalink to &quot;容器化&quot;">​</a></h3><p>创建Dockerfile将项目打包为镜像，方便容器化部署。</p><h2 id="基于jenkins的ci-cd最佳实践" tabindex="-1">基于Jenkins的CI/CD最佳实践 <a class="header-anchor" href="#基于jenkins的ci-cd最佳实践" aria-label="Permalink to &quot;基于Jenkins的CI/CD最佳实践&quot;">​</a></h2><p>详细过程</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ol><li>持续集成，<a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noreferrer">https://www.redhat.com/zh/topics/devops/what-is-ci-cd</a></li><li>持续交付和持续部署，<a href="https://codilime.com/blog/what-is-ci-cd/" target="_blank" rel="noreferrer">https://codilime.com/blog/what-is-ci-cd/</a></li><li></li></ol>',35)]))}const b=i(o,[["render",s]]);export{k as __pageData,b as default};
